// <auto-generated />
using System;
using FLBackEnd.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FLBackEnd.Infrastructure.Migrations
{
    [DbContext(typeof(FamilieLaissDbContext))]
    [Migration("20240409103418_SettingsSeekTimeChanged")]
    partial class SettingsSeekTimeChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("SequenceBlogEntry")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceCategory")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceCategoryValue")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceMediaGroup")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceMediaItem")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceMediaItemCategoryValue")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequencePictureConvertStatus")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceUploadIdentifier")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SequenceVideoConvertStatus")
                .IncrementsBy(10);

            modelBuilder.Entity("FLBackEnd.Domain.Entities.BlogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceBlogEntry");

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HeaderEnglish")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("HeaderGerman")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TextEnglish")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("TextGerman")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.HasKey("Id");

                    b.ToTable("BlogEntries");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceCategory");

                    b.Property<byte>("CategoryType")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("NameGerman")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryType", "NameEnglish")
                        .IsUnique();

                    b.HasIndex("CategoryType", "NameGerman")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.CategoryValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceCategoryValue");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("NameGerman")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "NameEnglish")
                        .IsUnique();

                    b.HasIndex("CategoryId", "NameGerman")
                        .IsUnique();

                    b.ToTable("CategoryValues");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceMediaGroup");

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEnglish")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("DescriptionGerman")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("NameGerman")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("NameEnglish")
                        .IsUnique();

                    b.HasIndex("NameGerman")
                        .IsUnique();

                    b.ToTable("MediaGroups");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceMediaItem");

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEnglish")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DescriptionGerman")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("MediaGroupId")
                        .HasColumnType("bigint");

                    b.Property<byte>("MediaType")
                        .HasColumnType("smallint");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameGerman")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("OnlyFamily")
                        .HasColumnType("boolean");

                    b.Property<long?>("UploadPictureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UploadVideoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaGroupId");

                    b.HasIndex("MediaType", "NameEnglish")
                        .IsUnique();

                    b.HasIndex("MediaType", "NameGerman")
                        .IsUnique();

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaItemCategoryValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceMediaItemCategoryValue");

                    b.Property<long>("CategoryValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MediaItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryValueId");

                    b.HasIndex("MediaItemId");

                    b.ToTable("MediaItemCategoryValues");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.PictureConvertStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequencePictureConvertStatus");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset?>("FinishDateConvert")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateExif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateConvert")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateExif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("UploadPictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UploadPictureId")
                        .IsUnique();

                    b.ToTable("PictureConvertStatusEntries");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadIdentifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceUploadIdentifier");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PseudoText")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("UploadIdentifiers");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadPicture", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<long?>("MediaItemId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId")
                        .IsUnique();

                    b.ToTable("UploadPictures");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadVideo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationHour")
                        .HasColumnType("integer");

                    b.Property<int>("DurationMinute")
                        .HasColumnType("integer");

                    b.Property<int>("DurationSecond")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("GpsLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("GpsLongitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<long?>("MediaItemId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("VideoType")
                        .HasColumnType("smallint");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaItemId")
                        .IsUnique();

                    b.ToTable("UploadVideos");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UserSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowZoomingWithMouseWheel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultKeepUploadWhenDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("GalleryCloseDimmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("GalleryCloseEsc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("GalleryMouseWheelChangeSlide")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("GalleryShowFullScreen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("GalleryShowThumbnails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("GalleryTransitionDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(600);

                    b.Property<string>("GalleryTransitionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("lg-fade");

                    b.Property<bool>("QuestionKeepUploadWhenDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowButtonForward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowButtonRewind")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowMirrorButton")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowPlayRateMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowQualityMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowTooltipForCurrentPlaytime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowTooltipForPlaytimeOnMouseCursor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowZoomInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("ShowZoomMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("VideoAutoPlay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("VideoAutoPlayOtherVideos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("VideoLoop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("VideoTimeSeekForwardRewind")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("VideoTimeToPlayNextVideo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("VideoVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100);

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.VideoConvertStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceVideoConvertStatus");

                    b.Property<int?>("ConvertHour")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertMinute")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestHour")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestMinute")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestSecond")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertSecond")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset?>("FinishDateConvertPicture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateCopyConverted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateDeleteOriginal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateDeleteTemp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateHls")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMediaInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp41080")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp42160")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4360")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4480")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4720")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateThumbnail")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateVtt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDateConvertPicture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateCopyConverted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateDeleteOriginal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateDeleteTemp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateHls")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMediaInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp41080")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp42160")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4360")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4480")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4720")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateThumbnail")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateVtt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("UploadVideoId")
                        .HasColumnType("bigint");

                    b.Property<byte>("VideoType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UploadVideoId")
                        .IsUnique();

                    b.ToTable("VideoConvertStatusEntries");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.CategoryValue", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.Category", "Category")
                        .WithMany("CategoryValues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaItem", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.MediaGroup", "MediaGroup")
                        .WithMany("MediaItems")
                        .HasForeignKey("MediaGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaGroup");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaItemCategoryValue", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.CategoryValue", "CategoryValue")
                        .WithMany("MediaItemCategoryValues")
                        .HasForeignKey("CategoryValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FLBackEnd.Domain.Entities.MediaItem", "MediaItem")
                        .WithMany("MediaItemCategoryValues")
                        .HasForeignKey("MediaItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryValue");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.PictureConvertStatus", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.UploadPicture", "UploadPicture")
                        .WithOne("ConvertStatus")
                        .HasForeignKey("FLBackEnd.Domain.Entities.PictureConvertStatus", "UploadPictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadPicture");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadPicture", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.MediaItem", "MediaItem")
                        .WithOne("UploadPicture")
                        .HasForeignKey("FLBackEnd.Domain.Entities.UploadPicture", "MediaItemId");

                    b.OwnsOne("FLBackEnd.Domain.ValueObjects.GoogleGeoCodingAddress", "GoogleGeoCodingAddress", b1 =>
                        {
                            b1.Property<long>("UploadPictureId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Hnr")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("UploadPictureId");

                            b1.ToTable("GoogleGeoCodingAddressesPicture", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UploadPictureId");
                        });

                    b.OwnsOne("FLBackEnd.Domain.ValueObjects.UploadPictureExifInfo", "UploadPictureExifInfo", b1 =>
                        {
                            b1.Property<long>("UploadPictureId")
                                .HasColumnType("bigint");

                            b1.Property<short?>("Contrast")
                                .HasColumnType("smallint");

                            b1.Property<DateTimeOffset?>("DdlRecorded")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<short?>("ExposureMode")
                                .HasColumnType("smallint");

                            b1.Property<short?>("ExposureProgram")
                                .HasColumnType("smallint");

                            b1.Property<double?>("ExposureTime")
                                .HasMaxLength(50)
                                .HasColumnType("double precision");

                            b1.Property<double?>("FNumber")
                                .HasColumnType("double precision");

                            b1.Property<short?>("FlashMode")
                                .HasColumnType("smallint");

                            b1.Property<double?>("FocalLength")
                                .HasColumnType("double precision");

                            b1.Property<double?>("GpsLatitude")
                                .HasColumnType("double precision");

                            b1.Property<double?>("GpsLongitude")
                                .HasColumnType("double precision");

                            b1.Property<int?>("IsoSensitivity")
                                .HasColumnType("integer");

                            b1.Property<string>("Make")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)");

                            b1.Property<short?>("MeteringMode")
                                .HasColumnType("smallint");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)");

                            b1.Property<short?>("Orientation")
                                .HasColumnType("smallint");

                            b1.Property<short?>("ResolutionUnit")
                                .HasMaxLength(100)
                                .HasColumnType("smallint");

                            b1.Property<double?>("ResolutionX")
                                .HasColumnType("double precision");

                            b1.Property<double?>("ResolutionY")
                                .HasColumnType("double precision");

                            b1.Property<short?>("Saturation")
                                .HasColumnType("smallint");

                            b1.Property<short?>("SensingMode")
                                .HasColumnType("smallint");

                            b1.Property<short?>("Sharpness")
                                .HasColumnType("smallint");

                            b1.Property<double?>("ShutterSpeed")
                                .HasColumnType("double precision");

                            b1.Property<short?>("WhiteBalanceMode")
                                .HasColumnType("smallint");

                            b1.HasKey("UploadPictureId");

                            b1.ToTable("UploadPictureExifInfos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UploadPictureId");
                        });

                    b.Navigation("GoogleGeoCodingAddress");

                    b.Navigation("MediaItem");

                    b.Navigation("UploadPictureExifInfo");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadVideo", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.MediaItem", "MediaItem")
                        .WithOne("UploadVideo")
                        .HasForeignKey("FLBackEnd.Domain.Entities.UploadVideo", "MediaItemId");

                    b.OwnsOne("FLBackEnd.Domain.ValueObjects.GoogleGeoCodingAddress", "GoogleGeoCodingAddress", b1 =>
                        {
                            b1.Property<long>("UploadVideoId")
                                .HasColumnType("bigint");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Hnr")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("UploadVideoId");

                            b1.ToTable("GoogleGeoCodingAddressesVideo", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UploadVideoId");
                        });

                    b.Navigation("GoogleGeoCodingAddress");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.VideoConvertStatus", b =>
                {
                    b.HasOne("FLBackEnd.Domain.Entities.UploadVideo", "UploadVideo")
                        .WithOne("ConvertStatus")
                        .HasForeignKey("FLBackEnd.Domain.Entities.VideoConvertStatus", "UploadVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadVideo");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryValues");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.CategoryValue", b =>
                {
                    b.Navigation("MediaItemCategoryValues");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaGroup", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.MediaItem", b =>
                {
                    b.Navigation("MediaItemCategoryValues");

                    b.Navigation("UploadPicture");

                    b.Navigation("UploadVideo");
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadPicture", b =>
                {
                    b.Navigation("ConvertStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("FLBackEnd.Domain.Entities.UploadVideo", b =>
                {
                    b.Navigation("ConvertStatus")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
