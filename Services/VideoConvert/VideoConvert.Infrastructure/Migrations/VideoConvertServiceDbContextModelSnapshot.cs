// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VideoConvert.Infrastructure.DBContext;

#nullable disable

namespace VideoConvert.Infrastructure.Migrations
{
    [DbContext(typeof(VideoConvertServiceDbContext))]
    partial class VideoConvertServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("SequenceVideoConvertStatus")
                .IncrementsBy(10);

            modelBuilder.Entity("VideoConvert.Domain.Entities.UploadVideo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UploadVideos");
                });

            modelBuilder.Entity("VideoConvert.Domain.Entities.VideoConvertStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "SequenceVideoConvertStatus");

                    b.Property<int?>("ConvertHour")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertMinute")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestHour")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestMinute")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertRestSecond")
                        .HasColumnType("integer");

                    b.Property<int?>("ConvertSecond")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset?>("FinishDateConvertPicture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateCopyConverted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateDeleteOriginal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateDeleteTemp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateHls")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMediaInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp41080")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp42160")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4360")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4480")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateMp4720")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateThumbnail")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinishDateVtt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDateConvertPicture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateCopyConverted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateDeleteOriginal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateDeleteTemp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateHls")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMediaInfo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp41080")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp42160")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4360")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4480")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateMp4720")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateThumbnail")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDateVtt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("UploadVideoId")
                        .HasColumnType("bigint");

                    b.Property<byte>("VideoType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UploadVideoId")
                        .IsUnique();

                    b.ToTable("ConvertStatusEntries");
                });

            modelBuilder.Entity("VideoConvert.Domain.Entities.VideoConvertStatus", b =>
                {
                    b.HasOne("VideoConvert.Domain.Entities.UploadVideo", "UploadVideo")
                        .WithOne("ConvertStatus")
                        .HasForeignKey("VideoConvert.Domain.Entities.VideoConvertStatus", "UploadVideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadVideo");
                });

            modelBuilder.Entity("VideoConvert.Domain.Entities.UploadVideo", b =>
                {
                    b.Navigation("ConvertStatus")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
